import pandas as pd
import json

from numpy import deg2rad
from icecream import ic

try:
    #Загрузка конфигурационного файла
    with open("config.json", "r") as f:
        config = json.load(f)
except FileNotFoundError:
    #Если файл не найден, то вызывается исключение
    print("Файл config.json не найден")

# Конфигурационные параметры
INTERACTIVE = config["INTERACTIVE"] # [bool] включение интерактивного режима
EXCEL = config["EXCEL"]             # [bool] запись результатов в Excel
EXCEL_FILE = config["EXCEL_FILE"]   # [str] имя файла для записи результатов
DEBUG = config["DEBUG"]


#Номер варианта
N = config["N"]

#Парсинг из файла
_data = pd.ExcelFile("data.xlsx").parse().astype(float)
_data = {
    "W_EFF": _data.iloc[N-1, 0],    # [м/с]
    "P_1": _data.iloc[N-1, 1],      # [кН]
    "P_2": _data.iloc[N-1, 2],      # [кН]
    "H_MS_11": _data.iloc[N-1, 3],  # [км]
    "H_MS_12": _data.iloc[N-1, 4],  # [км]
    "H_MS_21": _data.iloc[N-1, 5],  # [км]
    "H_MS_22": _data.iloc[N-1, 6],  # [км]
}

W_EFF = _data["W_EFF"] / 1000       # [км/с] эффективная скорость истечения топлива
THRUST_1 = _data["P_1"]             # [кН] тяга СВ
THRUST_2 = _data["P_2"]             # [кН] тяга СВ
H_MS_11 = _data["H_MS_11"]          # [км] 1е значение высоты круговой целевой орбиты для значения тяги 1
H_MS_12 = _data["H_MS_12"]          # [км] 2е значение высоты круговой целевой орбиты для значения тяги 1
H_MS_21 = _data["H_MS_21"]          # [км] 1е значение высоты круговой целевой орбиты для значения тяги 2
H_MS_22 = _data["H_MS_22"]          # [км] 2е значение высоты круговой целевой орбиты для значения тяги 2

R_MOON = 1738000 / 1000             # [км] радиус Луны
MU_MOON = 4.903 * (10**3)           # [км^3/с^2] гравитационный параметр Луны

M_0 = 3015                          # [кг] начальная масса СВ
M_FUEL_MAX = 1550                   # [кг] предельная масса рабочего запаса топлива ДУ СВ
M_CONST = 615                       # [кг] масса конструкции СВ
T_VERTICAL = 14                     # [с] продолжительность вертикального участка выведения
DELTA_T = 0.1                       # [с] шаг интегрирования

# Начальные условия
X_0 = 0.0
Y_0 = 0.0
V_X_0 = 0.0
V_Y_0 = 0.0
T_0 = 0.0

# ПАРАМЕТРЫ ДЛЯ ТЕСТИРОВАНИЯ
T_1 = config["T_1"]                         # [c] время окончания работы ДУ после 1го запуска
T_2 = config["T_2"]                         # [с] время 2го запуска ДУ
T_3 = config["T_3"]                         # [c] время окончания работы ДУ после 2го запуска
T_END = config["T_END"]                     # [c] время окончания интегрирования
DEG = config["DEG"]                         # [true/false] задание НУ в градусах/радианах
if DEG:
    DPITCH_DT = deg2rad(config["DPITCH_DT"])    # [рад] закон изменения угла тангажа с момента конца вертикального участка, до T_1
    PITCH_2 = deg2rad(config["PITCH_2"])        # [рад] угол тангажа с моменат 2го запуска ДУ
else:
    DPITCH_DT = config["DPITCH_DT"]         # [рад] закон изменения угла тангажа с момента конца вертикального участка, до T_1
    PITCH_2 = config["PITCH_2"]             # [рад] угол тангажа с моменат 2го запуска ДУ
